{
  "question": "给出如下配置：\n```python\ncluster.setInstanceOption('host1:3377', 'memberWeight', 40)\ncluster.setInstanceOption('host2:3377', 'memberWeight', 30)\ncluster.setInstanceOption('host3:3377', 'memberWeight', 40)\ncluster.setInstanceOption('host3:3377', 'exitStateAction', \"ABORT SERVER\")\ncluster.setInstanceOption(\"expelTimeout\", 1)\n```\n当前集群状态如下：\n```json\n{\n  \"topology\": {\n    \"host1:3377\": { \"address\": \"host1:3377\", \"mode\": \"R/O\", \"status\": \"ONLINE\" },\n    \"host2:3377\": { \"address\": \"host2:3377\", \"mode\": \"R/O\", \"status\": \"ONLINE\" },\n    \"host3:3377\": { \"address\": \"host3:3377\", \"mode\": \"R/W\", \"status\": \"ONLINE\" }\n  }\n}\n```\n问题：在永久性网络故障隔离了 `host3` 的情况下，以下哪两项是正确的？",
  "selections": {
    "A": "在 `host1` 上部署的实例发生故障时会引发停机。",
    "B": "可使用命令 `cluster.setPrimaryInstance(<host>:<port>)` 指定主实例。",
    "C": "发出的命令 `cluster.switchToMultiPrimaryMode()` 将无法启用多主模式（multi_primary_mode）。",
    "D": "重新建立连接后，`host3` 上部署的实例将自动重加入集群。",
    "E": "在 `host3` 上部署的实例会被从集群中解开，但必须使用 `cluster.addInstance('host3:3377')` 重新加入。",
    "F": "部署在 `host2` 上的实例被选为新的主实例。"
  },
  "answers": ["B", "C"],
  "summary": "#### A. 在 `host1` 上部署的实例发生故障时会引发停机。\n错误。host1 是只读节点（R/O），即使其发生故障，只要主节点和其他节点在线，集群仍可正常运行，不会导致整个集群停机。\n#### B. 可使用命令 `cluster.setPrimaryInstance(<host>:<port>)` 指定主实例。\n正确。这是 MySQL Shell 中提供的一个命令，允许手动设置某个节点为主节点（R/W），适用于单主模式下的主节点切换操作。\n#### C. 发出的命令 `cluster.switchToMultiPrimaryMode()` 将无法启用多主模式（multi_primary_mode）。\n正确。虽然存在此命令，但是否能成功切换到多主模式取决于底层组复制配置。InnoDB Cluster 默认是单主模式，若启用了某些限制条件（如版本不兼容或参数冲突），可能无法切换。\n#### D. 重新建立连接后，`host3` 上部署的实例将自动重加入集群。\n错误。由于设置了 `exitStateAction = ABORT SERVER`，host3 实例在与集群失去联系后主动关闭自己（MySQL 实例终止）。重启后不会自动加入集群，需手动执行 `rejoinInstance()` 或 `addInstance()`。\n#### E. 在 `host3` 上部署的实例会被从集群中解开，但必须使用 `cluster.addInstance('host3:3377')` 重新加入。\n部分正确。如果 host3 已被彻底移除，确实需要使用 `addInstance`；但如果只是暂时离线，且数据一致，应优先尝试使用 `rejoinInstance()`。因此该选项表述略显绝对，不如 B 和 C 准确。\n#### F. 部署在 `host2` 上的实例被选为新的主实例。\n错误。虽然 host2 的 memberWeight 是 30，但 host1 的权重更高（40），更有可能被选举为主节点。主节点的选择基于多数派原则和成员权重。\n\n### 考点总结\n本题主要考查 MySQL InnoDB Cluster 的高可用机制与运维操作行为，涉及多个核心知识点：\n- 故障转移机制：主节点失效后如何选择新主节点？是否满足多数派原则？\n- exitStateAction 参数：控制节点脱离集群后的行为（ABORT SERVER 表示主动宕机）。\n- setPrimaryInstance() 命令：用于手动切换主节点。\n- switchToMultiPrimaryMode() 命令：是否能成功启用多主模式？依赖于底层配置。\n- 自动重连机制：实例重启后是否能自动加入集群？通常需要手动干预。\n- rejoinInstance() 与 addInstance() 的区别：何时使用哪个命令恢复集群成员。",
  "suggestion": "### 应试技巧与学习建议\n根据考试大纲内容，本题涉及以下主题：\n- Describe MySQL InnoDB cluster and Group Replication\n- Configure a MySQL InnoDB cluster\n- Perform an InnoDB cluster recovery\n\n建议考生深入理解 InnoDB Cluster 的工作机制，尤其是组复制、故障转移、主节点选举等流程。掌握关键配置参数的作用，包括 memberWeight、exitStateAction、autoRejoinAttempts、expelTimeout 等，并熟悉常用的管理命令，如 setPrimaryInstance()、rejoinInstance()、addInstance()、switchToMultiPrimaryMode()。\n\n动手搭建测试环境进行实践，模拟网络隔离、节点宕机等场景，观察集群行为变化，理解不同配置参数对集群稳定性的影响。注意题目中“永久性”和“临时性”网络故障的区别，处理方式有所不同。避免常见误区，例如认为所有节点都能自动重连、主节点一定由高权重节点继承。\n\n同时，结合考试大纲，重点掌握高可用技术相关主题，如组复制原理、集群恢复策略、日志分析、故障检测与修复等内容，做到理论与实践相结合，提升应对类似题目的判断力与解题能力。"
}