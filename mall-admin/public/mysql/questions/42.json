{
  "question": "关于使用散列联接算法（Hash Join Algorithm），下列哪个条件为真？",
  "selections": {
    "A": "联接中至少有一个表必须具有散列索引。",
    "B": "联接中最小的表必须位于由 `join_buffer_size` 设置的内存中。",
    "C": "没有可用于联接的索引。",
    "D": "查询访问的表不得超过两个。"
  },
  "answers": ["C"],
  "summary": "### 选项分析\n- **A. 联接中至少有一个表必须具有散列索引。**\n  错误。散列联接并不依赖于散列索引，而是通过内存中的散列表实现。\n- **B. 联接中最小的表必须位于由 `join_buffer_size` 设置的内存中。**\n  错误。`join_buffer_size` 是用于存储临时数据的缓冲区大小，而不是散列联接的核心要求。\n- **C. 没有可用于联接的索引。**\n  正确。散列联接通常是在没有可用索引的情况下使用的，属于一种“最后的手段”。\n- **D. 查询访问的表不得超过两个。**\n  错误。散列联接算法本身不限制联接的表数量。\n\n### 考点总结\n本题考查对 MySQL 散列联接算法的理解，特别是其适用场景和限制条件。重点在于明确散列联接的触发条件，例如无索引的情况，以及它与系统参数的关系。",
  "suggestion": "### 应试技巧\n1. **理解核心概念**：熟悉散列联接的原理及其与索引、内存的关系。\n2. **排除干扰选项**：注意题目中的误导性描述，如 `join_buffer_size` 和散列索引。\n3. **抓住关键词**：关注“没有索引”等关键表述，快速定位正确答案。\n\n### 学习建议\n- **复习考试大纲**：根据大纲内容，深入学习查询优化部分，尤其是 MySQL 优化器的工作机制。\n- **实践验证理论**：通过实验观察散列联接的行为，例如在无索引情况下执行联接操作。\n- **阅读官方文档**：MySQL 官方文档提供了详细的优化器说明，有助于全面掌握相关知识点。"
}